# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vnstock_pb2 as vnstock__pb2


class StockDataServiceStub(object):
    """Stock data service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStockData = channel.unary_unary(
                '/vnstock.StockDataService/GetStockData',
                request_serializer=vnstock__pb2.StockRequest.SerializeToString,
                response_deserializer=vnstock__pb2.StockResponse.FromString,
                _registered_method=True)
        self.GetMultipleStocks = channel.unary_unary(
                '/vnstock.StockDataService/GetMultipleStocks',
                request_serializer=vnstock__pb2.MultiStockRequest.SerializeToString,
                response_deserializer=vnstock__pb2.MultiStockResponse.FromString,
                _registered_method=True)
        self.StreamStockData = channel.unary_stream(
                '/vnstock.StockDataService/StreamStockData',
                request_serializer=vnstock__pb2.StreamRequest.SerializeToString,
                response_deserializer=vnstock__pb2.StockResponse.FromString,
                _registered_method=True)


class StockDataServiceServicer(object):
    """Stock data service definition
    """

    def GetStockData(self, request, context):
        """Get single stock data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultipleStocks(self, request, context):
        """Get multiple stocks data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamStockData(self, request, context):
        """Real-time streaming (for future use)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStockData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockData,
                    request_deserializer=vnstock__pb2.StockRequest.FromString,
                    response_serializer=vnstock__pb2.StockResponse.SerializeToString,
            ),
            'GetMultipleStocks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultipleStocks,
                    request_deserializer=vnstock__pb2.MultiStockRequest.FromString,
                    response_serializer=vnstock__pb2.MultiStockResponse.SerializeToString,
            ),
            'StreamStockData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamStockData,
                    request_deserializer=vnstock__pb2.StreamRequest.FromString,
                    response_serializer=vnstock__pb2.StockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vnstock.StockDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vnstock.StockDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StockDataService(object):
    """Stock data service definition
    """

    @staticmethod
    def GetStockData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vnstock.StockDataService/GetStockData',
            vnstock__pb2.StockRequest.SerializeToString,
            vnstock__pb2.StockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMultipleStocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vnstock.StockDataService/GetMultipleStocks',
            vnstock__pb2.MultiStockRequest.SerializeToString,
            vnstock__pb2.MultiStockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamStockData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/vnstock.StockDataService/StreamStockData',
            vnstock__pb2.StreamRequest.SerializeToString,
            vnstock__pb2.StockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
