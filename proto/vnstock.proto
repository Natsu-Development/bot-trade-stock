syntax = "proto3";

package vnstock;

option go_package = "../bot-trade/pkg/grpc-broker/vnstock";

// Stock data service definition
service StockDataService {
    // Get single stock data
    rpc GetStockData(StockRequest) returns (StockResponse);
    
    // Get multiple stocks data
    rpc GetMultipleStocks(MultiStockRequest) returns (MultiStockResponse);
    
    // Real-time streaming (for future use)
    rpc StreamStockData(StreamRequest) returns (stream StockResponse);
}

// Request for single stock
message StockRequest {
    string symbol = 1;
    string start_date = 3;            // Format: YYYY-MM-DD, optional
    string end_date = 4;              // Format: YYYY-MM-DD, optional (default: today)
    string interval = 5;              // Data interval: "1d", "1h", "15m", etc. (default: "1d")
}

// Request for multiple stocks
message MultiStockRequest {
    repeated string symbols = 1;
    string start_date = 3;            // Format: YYYY-MM-DD, optional
    string end_date = 4;              // Format: YYYY-MM-DD, optional (default: today)
    string interval = 5;              // Data interval: "1d", "1h", "15m", etc. (default: "1d")
}

// Request for streaming
message StreamRequest {
    repeated string symbols = 1;
    int32 interval_seconds = 2;       // Stream update interval in seconds
    string start_date = 4;            // Format: YYYY-MM-DD, optional
    string end_date = 5;              // Format: YYYY-MM-DD, optional (default: today)
    string data_interval = 6;         // Data interval: "1d", "1h", "15m", etc. (default: "1d")
}

// Single stock response
message StockResponse {
    string symbol = 1;
    string timestamp = 2;
    MarketData market_data = 3;
    repeated PriceData price_history = 4;
    int32 data_points = 5;
    string status = 6;
    string error = 7;
}

// Multiple stocks response
message MultiStockResponse {
    string timestamp = 1;
    int32 total_symbols = 2;
    map<string, StockResponse> data = 3;
}

// Market data structure
message MarketData {
    double latest_price = 1;
    double price_change = 2;
    double price_change_percent = 3;
    int64 current_volume = 4;
    double volume_ratio = 5;
    double price_volatility = 6;
    string trading_date = 7;
}

// Price data structure
message PriceData {
    string date = 1;
    double close = 2;
    int64 volume = 3;
    double high = 4;
    double low = 5;
}
