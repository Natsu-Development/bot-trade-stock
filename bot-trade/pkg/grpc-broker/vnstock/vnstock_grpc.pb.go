// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: vnstock.proto

package vnstock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockDataService_GetStockData_FullMethodName      = "/vnstock.StockDataService/GetStockData"
	StockDataService_GetMultipleStocks_FullMethodName = "/vnstock.StockDataService/GetMultipleStocks"
	StockDataService_StreamStockData_FullMethodName   = "/vnstock.StockDataService/StreamStockData"
)

// StockDataServiceClient is the client API for StockDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Stock data service definition
type StockDataServiceClient interface {
	// Get single stock data
	GetStockData(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	// Get multiple stocks data
	GetMultipleStocks(ctx context.Context, in *MultiStockRequest, opts ...grpc.CallOption) (*MultiStockResponse, error)
	// Real-time streaming (for future use)
	StreamStockData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockResponse], error)
}

type stockDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockDataServiceClient(cc grpc.ClientConnInterface) StockDataServiceClient {
	return &stockDataServiceClient{cc}
}

func (c *stockDataServiceClient) GetStockData(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, StockDataService_GetStockData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockDataServiceClient) GetMultipleStocks(ctx context.Context, in *MultiStockRequest, opts ...grpc.CallOption) (*MultiStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiStockResponse)
	err := c.cc.Invoke(ctx, StockDataService_GetMultipleStocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockDataServiceClient) StreamStockData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockDataService_ServiceDesc.Streams[0], StockDataService_StreamStockData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StockResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockDataService_StreamStockDataClient = grpc.ServerStreamingClient[StockResponse]

// StockDataServiceServer is the server API for StockDataService service.
// All implementations must embed UnimplementedStockDataServiceServer
// for forward compatibility.
//
// Stock data service definition
type StockDataServiceServer interface {
	// Get single stock data
	GetStockData(context.Context, *StockRequest) (*StockResponse, error)
	// Get multiple stocks data
	GetMultipleStocks(context.Context, *MultiStockRequest) (*MultiStockResponse, error)
	// Real-time streaming (for future use)
	StreamStockData(*StreamRequest, grpc.ServerStreamingServer[StockResponse]) error
	mustEmbedUnimplementedStockDataServiceServer()
}

// UnimplementedStockDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockDataServiceServer struct{}

func (UnimplementedStockDataServiceServer) GetStockData(context.Context, *StockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockData not implemented")
}
func (UnimplementedStockDataServiceServer) GetMultipleStocks(context.Context, *MultiStockRequest) (*MultiStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultipleStocks not implemented")
}
func (UnimplementedStockDataServiceServer) StreamStockData(*StreamRequest, grpc.ServerStreamingServer[StockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStockData not implemented")
}
func (UnimplementedStockDataServiceServer) mustEmbedUnimplementedStockDataServiceServer() {}
func (UnimplementedStockDataServiceServer) testEmbeddedByValue()                          {}

// UnsafeStockDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockDataServiceServer will
// result in compilation errors.
type UnsafeStockDataServiceServer interface {
	mustEmbedUnimplementedStockDataServiceServer()
}

func RegisterStockDataServiceServer(s grpc.ServiceRegistrar, srv StockDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedStockDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockDataService_ServiceDesc, srv)
}

func _StockDataService_GetStockData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockDataServiceServer).GetStockData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockDataService_GetStockData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockDataServiceServer).GetStockData(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockDataService_GetMultipleStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockDataServiceServer).GetMultipleStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockDataService_GetMultipleStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockDataServiceServer).GetMultipleStocks(ctx, req.(*MultiStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockDataService_StreamStockData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockDataServiceServer).StreamStockData(m, &grpc.GenericServerStream[StreamRequest, StockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockDataService_StreamStockDataServer = grpc.ServerStreamingServer[StockResponse]

// StockDataService_ServiceDesc is the grpc.ServiceDesc for StockDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vnstock.StockDataService",
	HandlerType: (*StockDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockData",
			Handler:    _StockDataService_GetStockData_Handler,
		},
		{
			MethodName: "GetMultipleStocks",
			Handler:    _StockDataService_GetMultipleStocks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStockData",
			Handler:       _StockDataService_StreamStockData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vnstock.proto",
}
