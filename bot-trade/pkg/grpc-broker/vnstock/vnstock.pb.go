// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: vnstock.proto

package vnstock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for single stock
type StockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	StartDate     string                 `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // Format: YYYY-MM-DD, optional
	EndDate       string                 `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // Format: YYYY-MM-DD, optional (default: today)
	Interval      string                 `protobuf:"bytes,5,opt,name=interval,proto3" json:"interval,omitempty"`                    // Data interval: "1d", "1h", "15m", etc. (default: "1d")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StockRequest) Reset() {
	*x = StockRequest{}
	mi := &file_vnstock_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockRequest) ProtoMessage() {}

func (x *StockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnstock_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockRequest.ProtoReflect.Descriptor instead.
func (*StockRequest) Descriptor() ([]byte, []int) {
	return file_vnstock_proto_rawDescGZIP(), []int{0}
}

func (x *StockRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *StockRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *StockRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

// Request for multiple stocks
type MultiStockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []string               `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	StartDate     string                 `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // Format: YYYY-MM-DD, optional
	EndDate       string                 `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // Format: YYYY-MM-DD, optional (default: today)
	Interval      string                 `protobuf:"bytes,5,opt,name=interval,proto3" json:"interval,omitempty"`                    // Data interval: "1d", "1h", "15m", etc. (default: "1d")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStockRequest) Reset() {
	*x = MultiStockRequest{}
	mi := &file_vnstock_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStockRequest) ProtoMessage() {}

func (x *MultiStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnstock_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStockRequest.ProtoReflect.Descriptor instead.
func (*MultiStockRequest) Descriptor() ([]byte, []int) {
	return file_vnstock_proto_rawDescGZIP(), []int{1}
}

func (x *MultiStockRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *MultiStockRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MultiStockRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *MultiStockRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

// Request for streaming
type StreamRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Symbols         []string               `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	IntervalSeconds int32                  `protobuf:"varint,2,opt,name=interval_seconds,json=intervalSeconds,proto3" json:"interval_seconds,omitempty"` // Stream update interval in seconds
	StartDate       string                 `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`                    // Format: YYYY-MM-DD, optional
	EndDate         string                 `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`                          // Format: YYYY-MM-DD, optional (default: today)
	DataInterval    string                 `protobuf:"bytes,6,opt,name=data_interval,json=dataInterval,proto3" json:"data_interval,omitempty"`           // Data interval: "1d", "1h", "15m", etc. (default: "1d")
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	mi := &file_vnstock_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vnstock_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_vnstock_proto_rawDescGZIP(), []int{2}
}

func (x *StreamRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *StreamRequest) GetIntervalSeconds() int32 {
	if x != nil {
		return x.IntervalSeconds
	}
	return 0
}

func (x *StreamRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *StreamRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *StreamRequest) GetDataInterval() string {
	if x != nil {
		return x.DataInterval
	}
	return ""
}

// Single stock response
type StockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Timestamp     string                 `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MarketData    *MarketData            `protobuf:"bytes,3,opt,name=market_data,json=marketData,proto3" json:"market_data,omitempty"`
	PriceHistory  []*PriceData           `protobuf:"bytes,4,rep,name=price_history,json=priceHistory,proto3" json:"price_history,omitempty"`
	DataPoints    int32                  `protobuf:"varint,5,opt,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"`
	Status        string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Error         string                 `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StockResponse) Reset() {
	*x = StockResponse{}
	mi := &file_vnstock_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockResponse) ProtoMessage() {}

func (x *StockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vnstock_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockResponse.ProtoReflect.Descriptor instead.
func (*StockResponse) Descriptor() ([]byte, []int) {
	return file_vnstock_proto_rawDescGZIP(), []int{3}
}

func (x *StockResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *StockResponse) GetMarketData() *MarketData {
	if x != nil {
		return x.MarketData
	}
	return nil
}

func (x *StockResponse) GetPriceHistory() []*PriceData {
	if x != nil {
		return x.PriceHistory
	}
	return nil
}

func (x *StockResponse) GetDataPoints() int32 {
	if x != nil {
		return x.DataPoints
	}
	return 0
}

func (x *StockResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StockResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Multiple stocks response
type MultiStockResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Timestamp     string                    `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TotalSymbols  int32                     `protobuf:"varint,2,opt,name=total_symbols,json=totalSymbols,proto3" json:"total_symbols,omitempty"`
	Data          map[string]*StockResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStockResponse) Reset() {
	*x = MultiStockResponse{}
	mi := &file_vnstock_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStockResponse) ProtoMessage() {}

func (x *MultiStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vnstock_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStockResponse.ProtoReflect.Descriptor instead.
func (*MultiStockResponse) Descriptor() ([]byte, []int) {
	return file_vnstock_proto_rawDescGZIP(), []int{4}
}

func (x *MultiStockResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MultiStockResponse) GetTotalSymbols() int32 {
	if x != nil {
		return x.TotalSymbols
	}
	return 0
}

func (x *MultiStockResponse) GetData() map[string]*StockResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// Market data structure
type MarketData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LatestPrice        float64                `protobuf:"fixed64,1,opt,name=latest_price,json=latestPrice,proto3" json:"latest_price,omitempty"`
	PriceChange        float64                `protobuf:"fixed64,2,opt,name=price_change,json=priceChange,proto3" json:"price_change,omitempty"`
	PriceChangePercent float64                `protobuf:"fixed64,3,opt,name=price_change_percent,json=priceChangePercent,proto3" json:"price_change_percent,omitempty"`
	CurrentVolume      int64                  `protobuf:"varint,4,opt,name=current_volume,json=currentVolume,proto3" json:"current_volume,omitempty"`
	VolumeRatio        float64                `protobuf:"fixed64,5,opt,name=volume_ratio,json=volumeRatio,proto3" json:"volume_ratio,omitempty"`
	PriceVolatility    float64                `protobuf:"fixed64,6,opt,name=price_volatility,json=priceVolatility,proto3" json:"price_volatility,omitempty"`
	TradingDate        string                 `protobuf:"bytes,7,opt,name=trading_date,json=tradingDate,proto3" json:"trading_date,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MarketData) Reset() {
	*x = MarketData{}
	mi := &file_vnstock_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketData) ProtoMessage() {}

func (x *MarketData) ProtoReflect() protoreflect.Message {
	mi := &file_vnstock_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketData.ProtoReflect.Descriptor instead.
func (*MarketData) Descriptor() ([]byte, []int) {
	return file_vnstock_proto_rawDescGZIP(), []int{5}
}

func (x *MarketData) GetLatestPrice() float64 {
	if x != nil {
		return x.LatestPrice
	}
	return 0
}

func (x *MarketData) GetPriceChange() float64 {
	if x != nil {
		return x.PriceChange
	}
	return 0
}

func (x *MarketData) GetPriceChangePercent() float64 {
	if x != nil {
		return x.PriceChangePercent
	}
	return 0
}

func (x *MarketData) GetCurrentVolume() int64 {
	if x != nil {
		return x.CurrentVolume
	}
	return 0
}

func (x *MarketData) GetVolumeRatio() float64 {
	if x != nil {
		return x.VolumeRatio
	}
	return 0
}

func (x *MarketData) GetPriceVolatility() float64 {
	if x != nil {
		return x.PriceVolatility
	}
	return 0
}

func (x *MarketData) GetTradingDate() string {
	if x != nil {
		return x.TradingDate
	}
	return ""
}

// Price data structure
type PriceData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          string                 `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Close         float64                `protobuf:"fixed64,2,opt,name=close,proto3" json:"close,omitempty"`
	Volume        int64                  `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	High          float64                `protobuf:"fixed64,4,opt,name=high,proto3" json:"high,omitempty"`
	Low           float64                `protobuf:"fixed64,5,opt,name=low,proto3" json:"low,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceData) Reset() {
	*x = PriceData{}
	mi := &file_vnstock_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceData) ProtoMessage() {}

func (x *PriceData) ProtoReflect() protoreflect.Message {
	mi := &file_vnstock_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceData.ProtoReflect.Descriptor instead.
func (*PriceData) Descriptor() ([]byte, []int) {
	return file_vnstock_proto_rawDescGZIP(), []int{6}
}

func (x *PriceData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *PriceData) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *PriceData) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PriceData) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *PriceData) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

var File_vnstock_proto protoreflect.FileDescriptor

const file_vnstock_proto_rawDesc = "" +
	"\n" +
	"\rvnstock.proto\x12\avnstock\"|\n" +
	"\fStockRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1d\n" +
	"\n" +
	"start_date\x18\x03 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x04 \x01(\tR\aendDate\x12\x1a\n" +
	"\binterval\x18\x05 \x01(\tR\binterval\"\x83\x01\n" +
	"\x11MultiStockRequest\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\x12\x1d\n" +
	"\n" +
	"start_date\x18\x03 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x04 \x01(\tR\aendDate\x12\x1a\n" +
	"\binterval\x18\x05 \x01(\tR\binterval\"\xb3\x01\n" +
	"\rStreamRequest\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\x12)\n" +
	"\x10interval_seconds\x18\x02 \x01(\x05R\x0fintervalSeconds\x12\x1d\n" +
	"\n" +
	"start_date\x18\x04 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x05 \x01(\tR\aendDate\x12#\n" +
	"\rdata_interval\x18\x06 \x01(\tR\fdataInterval\"\x83\x02\n" +
	"\rStockResponse\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\tR\ttimestamp\x124\n" +
	"\vmarket_data\x18\x03 \x01(\v2\x13.vnstock.MarketDataR\n" +
	"marketData\x127\n" +
	"\rprice_history\x18\x04 \x03(\v2\x12.vnstock.PriceDataR\fpriceHistory\x12\x1f\n" +
	"\vdata_points\x18\x05 \x01(\x05R\n" +
	"dataPoints\x12\x16\n" +
	"\x06status\x18\x06 \x01(\tR\x06status\x12\x14\n" +
	"\x05error\x18\a \x01(\tR\x05error\"\xe3\x01\n" +
	"\x12MultiStockResponse\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\tR\ttimestamp\x12#\n" +
	"\rtotal_symbols\x18\x02 \x01(\x05R\ftotalSymbols\x129\n" +
	"\x04data\x18\x03 \x03(\v2%.vnstock.MultiStockResponse.DataEntryR\x04data\x1aO\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.vnstock.StockResponseR\x05value:\x028\x01\"\x9c\x02\n" +
	"\n" +
	"MarketData\x12!\n" +
	"\flatest_price\x18\x01 \x01(\x01R\vlatestPrice\x12!\n" +
	"\fprice_change\x18\x02 \x01(\x01R\vpriceChange\x120\n" +
	"\x14price_change_percent\x18\x03 \x01(\x01R\x12priceChangePercent\x12%\n" +
	"\x0ecurrent_volume\x18\x04 \x01(\x03R\rcurrentVolume\x12!\n" +
	"\fvolume_ratio\x18\x05 \x01(\x01R\vvolumeRatio\x12)\n" +
	"\x10price_volatility\x18\x06 \x01(\x01R\x0fpriceVolatility\x12!\n" +
	"\ftrading_date\x18\a \x01(\tR\vtradingDate\"s\n" +
	"\tPriceData\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12\x14\n" +
	"\x05close\x18\x02 \x01(\x01R\x05close\x12\x16\n" +
	"\x06volume\x18\x03 \x01(\x03R\x06volume\x12\x12\n" +
	"\x04high\x18\x04 \x01(\x01R\x04high\x12\x10\n" +
	"\x03low\x18\x05 \x01(\x01R\x03low2\xe4\x01\n" +
	"\x10StockDataService\x12=\n" +
	"\fGetStockData\x12\x15.vnstock.StockRequest\x1a\x16.vnstock.StockResponse\x12L\n" +
	"\x11GetMultipleStocks\x12\x1a.vnstock.MultiStockRequest\x1a\x1b.vnstock.MultiStockResponse\x12C\n" +
	"\x0fStreamStockData\x12\x16.vnstock.StreamRequest\x1a\x16.vnstock.StockResponse0\x01B&Z$../bot-trade/pkg/grpc-broker/vnstockb\x06proto3"

var (
	file_vnstock_proto_rawDescOnce sync.Once
	file_vnstock_proto_rawDescData []byte
)

func file_vnstock_proto_rawDescGZIP() []byte {
	file_vnstock_proto_rawDescOnce.Do(func() {
		file_vnstock_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vnstock_proto_rawDesc), len(file_vnstock_proto_rawDesc)))
	})
	return file_vnstock_proto_rawDescData
}

var file_vnstock_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_vnstock_proto_goTypes = []any{
	(*StockRequest)(nil),       // 0: vnstock.StockRequest
	(*MultiStockRequest)(nil),  // 1: vnstock.MultiStockRequest
	(*StreamRequest)(nil),      // 2: vnstock.StreamRequest
	(*StockResponse)(nil),      // 3: vnstock.StockResponse
	(*MultiStockResponse)(nil), // 4: vnstock.MultiStockResponse
	(*MarketData)(nil),         // 5: vnstock.MarketData
	(*PriceData)(nil),          // 6: vnstock.PriceData
	nil,                        // 7: vnstock.MultiStockResponse.DataEntry
}
var file_vnstock_proto_depIdxs = []int32{
	5, // 0: vnstock.StockResponse.market_data:type_name -> vnstock.MarketData
	6, // 1: vnstock.StockResponse.price_history:type_name -> vnstock.PriceData
	7, // 2: vnstock.MultiStockResponse.data:type_name -> vnstock.MultiStockResponse.DataEntry
	3, // 3: vnstock.MultiStockResponse.DataEntry.value:type_name -> vnstock.StockResponse
	0, // 4: vnstock.StockDataService.GetStockData:input_type -> vnstock.StockRequest
	1, // 5: vnstock.StockDataService.GetMultipleStocks:input_type -> vnstock.MultiStockRequest
	2, // 6: vnstock.StockDataService.StreamStockData:input_type -> vnstock.StreamRequest
	3, // 7: vnstock.StockDataService.GetStockData:output_type -> vnstock.StockResponse
	4, // 8: vnstock.StockDataService.GetMultipleStocks:output_type -> vnstock.MultiStockResponse
	3, // 9: vnstock.StockDataService.StreamStockData:output_type -> vnstock.StockResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_vnstock_proto_init() }
func file_vnstock_proto_init() {
	if File_vnstock_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vnstock_proto_rawDesc), len(file_vnstock_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vnstock_proto_goTypes,
		DependencyIndexes: file_vnstock_proto_depIdxs,
		MessageInfos:      file_vnstock_proto_msgTypes,
	}.Build()
	File_vnstock_proto = out.File
	file_vnstock_proto_goTypes = nil
	file_vnstock_proto_depIdxs = nil
}
